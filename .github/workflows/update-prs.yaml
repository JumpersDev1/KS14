name: Update PR Branches

on:
  workflow_dispatch:

jobs:
  update-prs:
    runs-on: self-hosted
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            sudo apt update && sudo apt install gh -y
          fi

      - name: Get open pull requests
        id: get-prs
        run: |
          prs=$(gh pr list --state open --json number,headRefName,headRepositoryOwner --jq 'map("\(.number):\(.headRefName):\(.headRepositoryOwner.login)") | @sh' | tr -d "'")
          echo "prs=$prs" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Merge master into each PR branch
        if: env.prs != ''
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config --global submodule.fetchJobs 0
          git config --global submodule.recurse true

          for pr in $prs; do
            pr_number=$(echo $pr | cut -d':' -f1)
            branch=$(echo $pr | cut -d':' -f2)
            repo_owner=$(echo $pr | cut -d':' -f3)
            origin_repo=$(basename -s .git $(git remote get-url origin))

            if [ "$repo_owner" != "$(git remote get-url origin | cut -d':' -f2 | cut -d'/' -f1)" ]; then
              fork_remote="fork-$repo_owner"
              fork_repo="https://github.com/$repo_owner/$origin_repo.git"

              # Clean existing remote if exists
              git remote remove "$fork_remote" 2> /dev/null || true
              git remote add "$fork_remote" "$fork_repo"
              git fetch "$fork_remote"

              if ! git ls-remote --exit-code --heads "$fork_remote" "$branch" >/dev/null 2>&1; then
                echo "Branch $branch not found in $fork_remote, skipping PR #$pr_number"
                continue
              fi

              git checkout -b "temp-$branch" "$fork_remote/$branch"
              
              git submodule update --init --recursive --force || :
              git merge --no-commit --no-ff origin/master || {
                echo "Merge conflict in PR #$pr_number, skipping..."
                git checkout master
                git branch -D "temp-$branch"
                continue
              }

              git commit -m "Merge master into $branch"
              git push "$fork_remote" "temp-$branch:$branch"
              git checkout master
              git branch -D "temp-$branch"

            else
              git fetch origin "$branch"
              git checkout "$branch"
              
              git submodule update --init --recursive --force || :
              git merge --no-commit --no-ff origin/master || {
                echo "Merge conflict in PR #$pr_number, skipping..."
                git checkout master
                continue
              }

              git commit -m "Merge master into $branch"
              git push origin "$branch"
            fi
          done

name: Update PR Branches

on:
  workflow_dispatch:

jobs:
  update-prs:
    runs-on: self-hosted
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            sudo apt update && sudo apt install gh -y
          fi

      - name: Get open pull requests
        id: get-prs
        run: |
          prs=$(GH_TOKEN=${{ secrets.BOT_TOKEN }} gh pr list --state open --json number,headRefName,headRepositoryOwner --jq 'map("\(.number):\(.headRefName):\(.headRepositoryOwner.login)") | @sh' | tr -d "'")
          echo "prs=$prs" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Merge master into each PR branch
        if: env.prs != ''
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          for pr in $prs; do
            pr_number=$(echo $pr | cut -d':' -f1)
            branch=$(echo $pr | cut -d':' -f2)
            repo_owner=$(echo $pr | cut -d':' -f3)
            origin_repo=$(basename -s .git $(git remote get-url origin))

            if [ "$repo_owner" != "$(git remote get-url origin | cut -d':' -f2 | cut -d'/' -f1)" ]; then
              fork_remote="fork-$repo_owner"
              fork_repo="https://github.com/$repo_owner/$origin_repo.git"

              # Add/update remote
              if git remote | grep -q "^$fork_remote$"; then
                git remote set-url "$fork_remote" "$fork_repo"
                git fetch "$fork_remote"
              else
                git remote add "$fork_remote" "$fork_repo"
                git fetch "$fork_remote"
              fi

              # Verify branch exists
              if ! git ls-remote --exit-code --heads "$fork_remote" "$branch" >/dev/null 2>&1; then
                echo "Branch $branch not found in $fork_remote, skipping PR #$pr_number"
                continue
              fi

              # Create working branch
              git checkout -b "temp-$branch" "$fork_remote/$branch"
              
              # Attempt merge
              if ! git merge --no-commit --no-ff origin/master; then
                echo "Merge conflict in PR #$pr_number, skipping..."
                git reset --hard
                git checkout master
                git branch -D "temp-$branch"
                continue
              fi

              # Reset workflow file changes if present
              if git diff --name-only --cached | grep -q '.github/workflows/update-prs.yaml'; then
                echo "Resetting workflow file changes in PR #$pr_number"
                git restore --source=HEAD --staged -- .github/workflows/update-prs.yaml
                git restore --source=HEAD -- .github/workflows/update-prs.yaml
              fi

              # Commit and push
              git commit -m "Merge master into $branch (excluding workflow changes)"
              git push "$fork_remote" "temp-$branch:$branch"
              git checkout master
              git branch -D "temp-$branch"

            else
              # Handle same-repo PRs
              git fetch origin "$branch"
              git checkout "$branch"
              
              if ! git merge --no-commit --no-ff origin/master; then
                echo "Merge conflict in PR #$pr_number, skipping..."
                git reset --hard
                git checkout master
                continue
              fi

              # Reset workflow file changes if present
              if git diff --name-only --cached | grep -q '.github/workflows/update-prs.yaml'; then
                echo "Resetting workflow file changes in PR #$pr_number"
                git restore --source=HEAD --staged -- .github/workflows/update-prs.yaml
                git restore --source=HEAD -- .github/workflows/update-prs.yaml
              fi

              git commit -m "Merge master into $branch (excluding workflow changes)"
              git push origin "$branch"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
